# See https://github.com/helm-unittest/helm-unittest
suite: "Pod Disruption Budget"
templates: 
  - "pdb.yaml"
tests: 

- it: "Should use maxUnavailable: 50% as default"
  set: 
    podDisruptionBudget.enable: true
  asserts:
  - equal:
      path: "spec.maxUnavailable"
      value: "50%"

- it: "Should fail when spec.minAvailable > deployment.replicas."
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.minAvailable: 2
    deployment.replicas: 1
  asserts: 
    - failedTemplate:
        errorMessage: "podDisruptionBudget.minAvailable cannot be greater than or equal to deployment.replicas as it could potentially block a node infinitely."
     
- it: "Should fail when spec.minAvailable == deployment.replicas."
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.minAvailable: 1
    deployment.replicas: 1
  asserts: 
    - failedTemplate:
        errorMessage: "podDisruptionBudget.minAvailable cannot be greater than or equal to deployment.replicas as it could potentially block a node infinitely."
     
- it: "Should fail when spec.minAvailable == 100%."
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.minAvailable: 100%
    deployment.replicas: 1
  asserts: 
    - failedTemplate:
        errorMessage: "podDisruptionBudget.minAvailable cannot be 100% as it could potentially block a node infinitely."

- it: "Should fail when spec.minAvailable == 100%."
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.minAvailable: 100%
    deployment.replicas: 1
  asserts: 
    - failedTemplate:
        errorMessage: "podDisruptionBudget.minAvailable cannot be 100% as it could potentially block a node infinitely."

- it: "Should fail when spec.maxUnavailable == 0%"
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.maxUnavailable: 0%
    deployment.replicas: 1
  asserts: 
    - failedTemplate:
        errorMessage: "podDisruptionBudget.maxUnavailable cannot be 0% as it could potentially block a node infinitely."

- it: "Should fail when spec.maxUnavailable == 0"
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.maxUnavailable: 0
    deployment.replicas: 1
  asserts: 
    - failedTemplate:
        errorMessage: "podDisruptionBudget.maxUnavailable cannot be 0 as it could potentially block a node infinitely."

- it: "Should allow valid minAvailable integer value"
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.minAvailable: 1
    deployment.replicas: 2
  asserts:
    - equal: 
        path: "spec.minAvailable"
        value: 1

- it: "Should allow valid minAvailable string value"
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.minAvailable: "60%"
    deployment.replicas: 2
  asserts:
    - equal: 
        path: "spec.minAvailable"
        value: 60%

- it: "Should allow valid maxUnavailable integer value"
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.maxUnavailable: 1
    deployment.replicas: 2
  asserts:
    - equal: 
        path: "spec.maxUnavailable"
        value: 1

- it: "Should allow valid maxUnavailable string value"
  set: 
    podDisruptionBudget.enable: true
    podDisruptionBudget.maxUnavailable: "60%"
    deployment.replicas: 2
  asserts:
    - equal: 
        path: "spec.maxUnavailable"
        value: "60%"

- it: "Should fail when providing minAvailable as percentage when deployment.replicas is 1"
  set:
    podDisruptionBudget.enable: true
    podDisruptionBudget.minAvailable: "50%"
    deployment.replicas: 1
  asserts:
    - failedTemplate:
        errorMessage: "podDisruptionBudget.minAvailable cannot be set as percentage when deployment.replicas is set to 1 as that could potentially block a node infinitely due to how rounding is handled."
